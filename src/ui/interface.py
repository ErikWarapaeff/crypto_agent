"""–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""

from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt
from rich.markdown import Markdown
from rich.live import Live
from rich.text import Text
from rich import box
from typing import List, Dict, Any  
from config.settings import APP_NAME, APP_COLOR

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Rich –∫–æ–Ω—Å–æ–ª–∏
console = Console()

def display_welcome():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    console.clear()
    title = Text(APP_NAME, style=f"bold {APP_COLOR}")
    console.print(Panel(
        title, 
        box=box.DOUBLE,
        border_style=APP_COLOR,
        padding=(1, 15)
    ))
    
    console.print("\n[bold yellow]–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:[/bold yellow]")
    
    # –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    console.print("[bold cyan]–ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:[/bold cyan]")
    console.print(" ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤")
    console.print(" ‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –º–æ–Ω–µ—Ç")
    console.print(" ‚Ä¢ –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö")
    console.print(" ‚Ä¢ –ê–Ω–∞–ª–∏–∑ DeFi –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –∏ –ø—É–ª–æ–≤")
    console.print(" ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–æ–≤")
    console.print(" ‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π —Ç–æ–∫–µ–Ω–æ–≤")
    
    # –¢–æ—Ä–≥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    console.print("\n[bold cyan]–¢–æ—Ä–≥–æ–≤–ª—è (HyperLiquid):[/bold cyan]")
    console.print(" ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –∞–∫—Ç–∏–≤–æ–≤")
    console.print(" ‚Ä¢ –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏—è —Å–≤–µ—á–µ–π")
    console.print(" ‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
    console.print(" ‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä—ã–Ω–∫–∞—Ö –∏ –∞–∫–∫–∞—É–Ω—Ç–µ")
    
    # –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    console.print("\n[bold cyan]–ù–æ–≤–æ—Å—Ç–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (LlamaFeed):[/bold cyan]")
    console.print(" ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–Ω–æ–≤–æ—Å—Ç–∏")
    console.print(" ‚Ä¢ –ó–Ω–∞—á–∏–º—ã–µ —Ç–≤–∏—Ç—ã –∏–∑ –∫—Ä–∏–ø—Ç–æ–º–∏—Ä–∞")
    console.print(" ‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö–∞–∫–∞—Ö –∏ —É—è–∑–≤–∏–º–æ—Å—Ç—è—Ö")
    console.print(" ‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö —Ç–æ–∫–µ–Ω–æ–≤")
    console.print(" ‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤")
    console.print(" ‚Ä¢ –î–∞–Ω–Ω—ã–µ Polymarket")
    console.print(" ‚Ä¢ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–∞")
    
    console.print("\n[bold yellow]–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:[/bold yellow]")
    console.print(" ‚Ä¢ /research SYMBOL - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /research BTC)")
    console.print(" ‚Ä¢ exit, quit, q - –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    
    console.print("\n[dim](–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –∑–∞–ø—Ä–æ—Å)[/dim]\n")

def display_response(response_text):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."""
    console.print(Panel(
        Markdown(response_text),
        title="ü§ñ [bold blue]–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞[/bold blue]",
        title_align="left",
        border_style="blue",
        box=box.ROUNDED,
        padding=1
    ))

def get_multiline_input():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    lines = []
    console.print("[bold green]–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å (–¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É):[/bold green]")
    
    while True:
        line = input("‚îÇ " if lines else "‚ï≠ ")
        if not line and lines:  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –≤–≤–æ–¥
            break
        lines.append(line)
    
    return "\n".join(lines)

def display_thinking(message: str = "–ú–æ–¥–µ–ª—å –¥—É–º–∞–µ—Ç...") -> Console.status:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."""
    return console.status(f"[bold green]{message}[/bold green]", spinner="dots")

def display_exit_message():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    console.print("\n[bold cyan]–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Crypto Analysis Assistant![/bold cyan]")

def display_separator():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è–º–∏."""
    console.print("\n" + "-" * 80 + "\n")
    
def display_research_result(result: str, token_symbol: str):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–ª—É–±–æ–∫–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞."""
    console.print(Panel(
        Markdown(result),
        title=f"üî¨ [bold blue]–ì–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ {token_symbol}[/bold blue]",
        title_align="left",
        border_style="blue",
        box=box.ROUNDED,
        padding=1,
        width=100  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown
    ))
    
    console.print("\n[dim italic]–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫.[/dim italic]")
    display_separator()
    
    
def display_task_status(task_info: Dict[str, Any]) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏."""
    table = Table(box=box.ROUNDED, title="–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏")
    table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan")
    table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="magenta")
    
    status_colors = {
        "completed": "green",
        "in_progress": "yellow",
        "failed": "red"
    }
    
    for key, value in task_info.items():
        if key == "status":
            color = status_colors.get(value, "white")
            value = f"[{color}]{value}[/{color}]"
        table.add_row(key, str(value))
    
    console.print(table)

def display_agents_list(agents: Dict[str, Any]) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤."""
    table = Table(box=box.ROUNDED, title="–°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤")
    table.add_column("ID", style="cyan")
    table.add_column("–†–æ–ª—å", style="magenta")
    table.add_column("–°—Ç–∞—Ç—É—Å", style="green")
    
    for agent_id, agent in agents.items():
        table.add_row(
            agent_id,
            agent.role.value,
            "[green]–ê–∫—Ç–∏–≤–µ–Ω[/green]" if agent.state else "[red]–ù–µ–∞–∫—Ç–∏–≤–µ–Ω[/red]"
        )
    
    console.print(table)

def display_task_execution_results(results: List[Dict[str, Any]]) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á."""
    table = Table(box=box.ROUNDED, title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–¥–∞—á")
    table.add_column("ID –∑–∞–¥–∞—á–∏", style="cyan")
    table.add_column("–°—Ç–∞—Ç—É—Å", style="magenta")
    table.add_column("–†–µ–∑—É–ª—å—Ç–∞—Ç")
    
    for result in results:
        status = "[green]–£—Å–ø–µ—Ö[/green]" if not isinstance(result.get('result'), Exception) else "[red]–û—à–∏–±–∫–∞[/red]"
        table.add_row(
            result['task_id'],
            status,
            str(result['result'])[:100] + "..." if len(str(result['result'])) > 100 else str(result['result'])
        )
    
    console.print(table)

def display_system_stats(stats: Dict[str, Any]) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    table = Table(box=box.ROUNDED, title="–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    table.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="cyan")
    table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="magenta")
    
    for metric, value in stats.items():
        table.add_row(metric, str(value))
    
    console.print(table)