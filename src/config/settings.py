"""–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""

import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# API –∫–ª—é—á–∏
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
COINGECKO_API_KEY = os.getenv("COINGECKO_API_KEY", "")
BITQUERY_API_KEY = os.getenv("BITQUERY_API_KEY", "")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ LLM
LLM_MODEL = "gpt-4"
LLM_TEMPERATURE = 0

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
APP_NAME = "üöÄ CRYPTO ANALYSIS AI ASSISTANT üöÄ"
APP_COLOR = "cyan"

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
def setup_environment():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    # –ï—Å–ª–∏ –∫–ª—é—á–µ–π –Ω–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Ö
    if not os.environ.get("OPENAI_API_KEY") and OPENAI_API_KEY:
        os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–π
    if not os.environ.get("OPENAI_API_KEY"):
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        
        
import logging
from logging.handlers import QueueHandler, QueueListener
from logging import StreamHandler, FileHandler
from queue import Queue

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# log_queue = Queue()
# queue_listener = QueueListener(
#     log_queue,
#     StreamHandler(),
#     FileHandler('agent_system.log', encoding='utf-8')
# )
# queue_listener.start()

# def configure_logging():
#     root_logger = logging.getLogger()
#     root_logger.setLevel(logging.INFO)
#     root_logger.addHandler(QueueHandler(log_queue))
    
#     # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å —Ü–≤–µ—Ç–∞–º–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
#     console_formatter = logging.Formatter(
#         '[%(asctime)s] %(levelname)-8s %(agent_id)s %(task_id)s %(message)s',
#         datefmt='%Y-%m-%d %H:%M:%S'
#     )
    
#     # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ñ–∞–π–ª–∞
#     file_formatter = logging.Formatter(
#         '[%(asctime)s] %(levelname)-8s %(agent_id)s %(task_id)s %(message)s'
#     )
    
#     for handler in queue_listener.handlers:
#         if isinstance(handler, StreamHandler):
#             handler.setFormatter(console_formatter)
#         elif isinstance(handler, FileHandler):
#             handler.setFormatter(file_formatter)

# configure_logging()
