"""–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LlamaFeed - –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π, —Ç–≤–∏—Ç–æ–≤, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö–∞–∫–∞—Ö –∏ —Ç.–¥."""

import asyncio
from typing import Optional, List, Dict, Any
from datetime import datetime, timedelta, timezone
from langchain_core.tools import tool
from pawn.llamafeed_worflow.worflow import LlamaFeedWorkflow

# –°–æ–∑–¥–∞–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ LlamaFeedWorkflow –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
_llamafeed_instance = None

def get_llamafeed_workflow():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä LlamaFeedWorkflow (—Å–∏–Ω–≥–ª—Ç–æ–Ω)"""
    global _llamafeed_instance
    if _llamafeed_instance is None:
        _llamafeed_instance = LlamaFeedWorkflow(openai_model="gpt-4o")
    return _llamafeed_instance

@tool
async def get_crypto_news(days: int = 3) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π.

    Args:
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)
    """
    workflow = get_llamafeed_workflow()
    since = datetime.now(timezone.utc) - timedelta(days=days)
    result = workflow.invoke(f"Give me crypto news since {since.isoformat()}")

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
    formatted_result = "üóûÔ∏è **–ü–û–°–õ–ï–î–ù–ò–ï –ö–†–ò–ü–¢–û–ù–û–í–û–°–¢–ò**\n\n"

    for item in result.get('news', [])[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 –Ω–æ–≤–æ—Å—Ç—è–º–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        title = item.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
        pub_date = item.get('pub_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        sentiment = item.get('sentiment', '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π')
        link = item.get('link', '#')

        formatted_result += f"üìå **{title}**\n"
        formatted_result += f"üìÖ {pub_date}\n"
        formatted_result += f"üîç –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {sentiment}\n"
        formatted_result += f"üîó {link}\n\n"

    return formatted_result

@tool
async def get_crypto_tweets(days: int = 3) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–≤–∏—Ç—ã –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö –æ—Ç –∑–Ω–∞—á–∏–º—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π.

    Args:
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–≤–∏—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)
    """
    workflow = get_llamafeed_workflow()
    since = datetime.now(timezone.utc) - timedelta(days=days)
    result = workflow.invoke(f"Fetch tweets since {since.isoformat()}")

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    formatted_result = "üê¶ **–í–ê–ñ–ù–´–ï –ö–†–ò–ü–¢–û–¢–í–ò–¢–´**\n\n"

    for item in result.get('tweets', [])[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Ç–≤–∏—Ç–∞–º–∏
        tweet = item.get('tweet', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞')
        created_at = item.get('tweet_created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        user_name = item.get('user_name', '–ê–Ω–æ–Ω–∏–º')
        sentiment = item.get('sentiment', '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π')

        formatted_result += f"üë§ **@{user_name}**\n"
        formatted_result += f"üí¨ {tweet}\n"
        formatted_result += f"üìÖ {created_at}\n"
        formatted_result += f"üîç –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {sentiment}\n\n"

    return formatted_result

@tool
async def get_crypto_hacks(days: int = 30) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–∞–∫–∞—Ö –∏ –≤–∑–ª–æ–º–∞—Ö –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–π —Å—Ñ–µ—Ä–µ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.

    Args:
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ö–∞–∫–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)
    """
    workflow = get_llamafeed_workflow()
    since = datetime.now(timezone.utc) - timedelta(days=days)
    result = workflow.invoke(f"What crypto hacks happened since {since.isoformat()}?")

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    formatted_result = "‚ö†Ô∏è **–ù–ï–î–ê–í–ù–ò–ï –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–ù–´–ï –•–ê–ö–ò**\n\n"

    for item in result.get('hacks', []):
        name = item.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç')
        timestamp = item.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        amount = item.get('amount', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—É–º–º–∞')
        source_url = item.get('source_url', '#')
        technique = item.get('technique', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')

        formatted_result += f"üîê **{name}**\n"
        formatted_result += f"üìÖ {timestamp}\n"
        formatted_result += f"üí∞ –£–∫—Ä–∞–¥–µ–Ω–æ: {amount}\n"
        formatted_result += f"üõ†Ô∏è –¢–µ—Ö–Ω–∏–∫–∞: {technique}\n"
        formatted_result += f"üîó {source_url}\n\n"

    if not result.get('hacks'):
        formatted_result += "–ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Ö–∞–∫–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.\n"

    return formatted_result

@tool
async def get_token_unlocks(days: int = 30) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö —Ç–æ–∫–µ–Ω–æ–≤.

    Args:
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)
    """
    workflow = get_llamafeed_workflow()
    since = datetime.now(timezone.utc) - timedelta(days=days)
    result = workflow.invoke(f"Are there any unlocks or raises since {since.isoformat()}?")

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    formatted_result = "üîì **–ü–†–ï–î–°–¢–û–Ø–©–ò–ï –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ò –¢–û–ö–ï–ù–û–í**\n\n"

    for item in result.get('unlocks', []):
        project = item.get('project', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç')
        date = item.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞')
        amount = item.get('amount', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        percentage = item.get('percentage', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç')

        formatted_result += f"üè¢ **{project}**\n"
        formatted_result += f"üìÖ –î–∞—Ç–∞: {date}\n"
        formatted_result += f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount}\n"
        if percentage:
            formatted_result += f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {percentage}\n"
        formatted_result += "\n"

    if not result.get('unlocks'):
        formatted_result += "–ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.\n"

    return formatted_result

@tool
async def get_project_raises(days: int = 30) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–æ–µ–∫—Ç–∞–º–∏.

    Args:
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)
    """
    workflow = get_llamafeed_workflow()
    since = datetime.now(timezone.utc) - timedelta(days=days)
    result = workflow.invoke(f"Are there any unlocks or raises since {since.isoformat()}?")

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    formatted_result = "üí∏ **–ù–ï–î–ê–í–ù–ò–ï –ü–†–ò–í–õ–ï–ß–ï–ù–ò–Ø –°–†–ï–î–°–¢–í**\n\n"

    for item in result.get('raises', []):
        project = item.get('project', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç')
        date = item.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞')
        amount = item.get('amount', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—É–º–º–∞')
        investors = item.get('investors', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')

        formatted_result += f"üè¢ **{project}**\n"
        formatted_result += f"üìÖ –î–∞—Ç–∞: {date}\n"
        formatted_result += f"üí∞ –°—É–º–º–∞: {amount}\n"
        formatted_result += f"üë• –ò–Ω–≤–µ—Å—Ç–æ—Ä—ã: {investors}\n\n"

    if not result.get('raises'):
        formatted_result += "–ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–π —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.\n"

    return formatted_result

@tool
async def get_polymarket_data(days: int = 7) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞ Polymarket.

    Args:
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7)
    """
    workflow = get_llamafeed_workflow()
    since = datetime.now(timezone.utc) - timedelta(days=days)
    result = workflow.invoke(f"Get Polymarket data since {since.isoformat()}")

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    formatted_result = "üîÆ **–î–ê–ù–ù–´–ï –ü–†–ï–î–ò–ö–¢–ò–í–ù–û–ì–û –†–´–ù–ö–ê POLYMARKET**\n\n"

    for item in result.get('polymarket', []):
        question = item.get('question', '–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–∞')
        end_date = item.get('end_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        probability = item.get('probability', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        volume = item.get('volume', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

        formatted_result += f"‚ùì **{question}**\n"
        formatted_result += f"üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date}\n"
        formatted_result += f"üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probability}\n"
        formatted_result += f"üíπ –û–±—ä–µ–º: {volume}\n\n"

    if not result.get('polymarket'):
        formatted_result += "–ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.\n"

    return formatted_result

@tool
async def get_market_summary(days: int = 3) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–∞, –≤–∫–ª—é—á–∞—è –Ω–æ–≤–æ—Å—Ç–∏, —Ç–≤–∏—Ç—ã –∏ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è.

    Args:
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)
    """
    workflow = get_llamafeed_workflow()
    since = datetime.now(timezone.utc) - timedelta(days=days)

    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    result = workflow.invoke(f"Provide a comprehensive market summary since {since.isoformat()} including news, tweets, and important events")

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    formatted_result = "üìä **–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –û–ë–ó–û–† –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–ù–û–ì–û –†–´–ù–ö–ê**\n\n"

    if 'summary' in result:
        formatted_result += f"{result['summary']}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
    if 'news' in result and result['news']:
        formatted_result += "**–ö–ª—é—á–µ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:**\n"
        for item in result['news'][:5]:
            formatted_result += f"- {item.get('title', '–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞')}\n"
        formatted_result += "\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–≤–∏—Ç—ã
    if 'tweets' in result and result['tweets']:
        formatted_result += "**–í–∞–∂–Ω—ã–µ —Ç–≤–∏—Ç—ã:**\n"
        for item in result['tweets'][:3]:
            user = item.get('user_name', '–ê–Ω–æ–Ω–∏–º')
            tweet = item.get('tweet', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞')
            formatted_result += f"- @{user}: {tweet}\n"
        formatted_result += "\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    if 'events' in result and result['events']:
        formatted_result += "**–í–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:**\n"
        for item in result['events']:
            formatted_result += f"- {item}\n"

    return formatted_result
